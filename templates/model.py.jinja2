# templates/model.py.jinja2
from sqlalchemy import (
    {% for sql_type in module.model.column_analysis | map(attribute='inferred_sql_type') | unique | reject('equalto', 'Integer') %}
    {{ sql_type }},
    {% endfor %}
    Integer,
    DateTime,
    ForeignKey,
    Index,
    Column,
    func,
)
from {{ project_name }}.src.db.database import Base


class {{ module.model.model_name }}(Base):
    __tablename__ = "{{ module.model.table_name }}"
    {# readability spacer #}
    {% if module.is_lookup_module %}
    # Lookup table - use domain primary key
    id = Column(Integer, primary_key=True)
    # Original FAO code (indexed for queries)
    {{ module.model.pk_sql_column_name }} = Column(String, nullable=False, index=True)
    {# readability spacer #}
        {% for column in module.model.column_analysis %}
            {% if column.sql_column_name != module.model.pk_sql_column_name %}
    {{ column.sql_column_name }} = Column({{ column.inferred_sql_type }}{% if column.null_count == 0 %}, nullable=False{% endif %})
            {% endif %}
        {% endfor %}
    {% else %} {# NOT module.is_lookup_module #}
    # Dataset table - use auto-increment id
    id = Column(Integer, primary_key=True)
    {# readability spacer #}
        {% for fk in module.model.foreign_keys %}
    # Foreign key to {{ fk.table_name }}
    {{ fk.hash_fk_sql_column_name }} = Column(Integer, ForeignKey("{{ fk.table_name }}.id"), index=True)
        {% endfor %}
        {# readability spacer #}
        {% for column in module.model.column_analysis %}
            {% if column.csv_column_name not in module.model.exclude_columns %}
    {{ column.sql_column_name }} = Column({{ column.inferred_sql_type }}{% if column.null_count == 0 %}, nullable=False{% endif %})
            {% endif %}
        {% endfor %}
    {# readability spacer #}
    {% endif %} {# end module.is_lookup_module #}  
    created_at = Column(DateTime, default=func.now(), nullable=False)
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now(), nullable=False)
    
    {% if module.is_lookup_module %}
    # Composite indexes for lookup tables
    __table_args__ = (
        Index("ix_{{ module.model.table_name[:8] }}_{{ module.model.pk_sql_column_name[:8] }}_src", '{{ module.model.pk_sql_column_name }}', 'source_dataset', unique=True),
    )
    {% endif %}
    
    def __repr__(self):
        {% if module.is_lookup_module %}
        return f"<{{ module.model.model_name }}({{ module.model.pk_sql_column_name }}={self.{{ module.model.pk_sql_column_name }}})>"
        {% else %}
        # Show first few columns for datasets
        {% set display_columns = [] %}
        {% for column in module.model.column_analysis[:3] %}
        {% if column.csv_column_name not in module.model.exclude_columns %}
        {% set _ = display_columns.append(column) %}
        {% endif %}
        {% endfor %}
        return f"<{{ module.model.model_name }}(id={self.id}{% for col in display_columns %}, {{ col.sql_column_name }}={self.{{ col.sql_column_name }}}{% endfor %})>"
        {% endif %}