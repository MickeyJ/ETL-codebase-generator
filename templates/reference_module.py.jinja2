import pandas as pd
from {{ project_name }}.src.db.utils import get_csv_path_for
from {{ project_name }}.src.db.database import run_with_session
from {{ project_name }}.src.db.pipelines.base import BaseLookupETL
from .{{ module.model.table_name }}_model import {{ module.model.model_name }}


class {{ module.model.model_name }}ETL(BaseLookupETL):
    """ETL pipeline for {{ module.model.table_name }} reference data"""
    
    def __init__(self):
        super().__init__(
            csv_path=get_csv_path_for("{{ module.file_info.csv_file }}"),
            model_class={{ module.model.model_name }},
            table_name="{{ module.model.table_name }}",
            hash_columns={{ module.model.hash_columns | tojson }},
            pk_column="{{ module.model.pk_column }}"
        )
    
    def clean(self, df: pd.DataFrame) -> pd.DataFrame:
        """Reference-specific cleaning"""
        # Common cleaning first
        df = self.base_clean(df)
        
        # Column-specific cleaning
        {% for column in module.model.column_analysis %}
        df['{{ column.csv_column_name }}'] = df['{{ column.csv_column_name }}'].astype(str).str.strip().str.replace("'", "")
        {% if column.format_methods %}
        {% for method in column.format_methods %}
        df['{{ column.csv_column_name }}'] = df['{{ column.csv_column_name }}'].str.{{ method }}()
        {% endfor %}
        {% endif %}
        {% if column.sql_column_name != module.model.pk_sql_column_name %}
        {% if column.inferred_sql_type == 'Integer' %}
        df['{{ column.csv_column_name }}'] = pd.to_numeric(df['{{ column.csv_column_name }}'], errors='coerce')
        {% elif column.inferred_sql_type == 'Float' %}
        df['{{ column.csv_column_name }}'] = pd.to_numeric(df['{{ column.csv_column_name }}'], errors='coerce')
        {% endif %}
        {% endif %}
        {% endfor %}
        
        return df
    
    def build_record(self, row: pd.Series) -> dict:
        """Build record for insertion"""
        record = {}
        {% for column in module.model.column_analysis %}
        record['{{ column.sql_column_name }}'] = row['{{ column.csv_column_name }}']
        {% endfor %}
        return record


# Module-level functions for backwards compatibility
etl = {{ module.model.model_name }}ETL()
load = etl.load
clean = etl.clean
insert = etl.insert
run = etl.run

if __name__ == "__main__":
    run_with_session(run)